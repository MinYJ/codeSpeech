(1) Value & Identifier
객체를 구별하는 방법은 식별자이다.
식별자: 런타임때, 메모리에 적재되어있었던 메모리의 주소를 의미한다

-> 똑같은 객체가 있다고 하더라도, 그 객체의 필드값이나 내부에 있는 요소가 일치한다고 같은 객체가 될 수 없다
왜냐하면 메모리주소가 다르기때문이다

(2) Polymorphism
아래 두 가지를 충족할 때 다형성이 충족된다

Substitution        : 대체가능성
Internal identity   : 내적동질성

(3) Object
아래의 2가지를 하는 이유는 격리(Isolation)를 위해서이다
-> 캡슐화된 기능만 노출했기 때문에 다양한 나머지 변화율이 격리되고 이 안에서 갇히기 때문에 다른 곳에 여파가 없게된다
-> 내가만든코드가 미래의 수정이 필요할 때, A B C가 있을때 A만 수정하면 B C는 여파가 없을까?
-> 그러면 격리를 했는지 안했는지 여부를 어떻게 알 수 있을까? 다른파일을 건드렸는지 안 건드렸는지 확인한다

기능의 캡슐화: Encapsulation of Functionality
상태관리: Maintenance of State

(4) Theater