const rNumber = /[+-]?(?:0[1-9][0-9]*)(?:\.[0-9]+)?(?:[eE][+-][1-9][0-9]*)?/

// 복습
/*
** 덩어리 되어있는 문제를 귀납적으로 생각한다
** 귀납적인식: 현재모양이 일반화되어있는 알고리즘의 반복으로 만들어졌을거라고 가정한다
** 귀납적 사고방식에 따르면 현재의 특정 상태는 
** 일반화된(표준화된) 알고리즘을 반복하면 얻을 수 있다라고 본다
*/

/*
** 55
** 앞의 수에 다음 자연수를 더한다라는 일반화된 알고리즘을 1~10까지 반복시키면 얻을 수 있다 
** sum = (v, acc)=> v ? sum(v-1, acc + v) : acc;
** sum = (v, acc)=> v ? v + sum(v-1) : v; -> 꼬리물기 최적화 안된 버전
*/

/*
** 반복하는 전체 과정을 한 단계만 잘라서 그 구조를 파악한다.
** 전체 과정을 전체적으로 파악하는 것은 어렵다
*/


/*
{
    {
        []
        1
        3
    }
}
** 복잡한 json을 보면 우리는 어떻게 loop를 돌릴것인지 보지 않는다
** 전체중에 일부분만 본다
** 한 단계 내에서 다양한 국면이 있는 것을 전부 찾아내서 mandatory로 로직을 작성한다
** 일반화된 로직이란? 하나로된 로직이 아니다 빈틈이 없다는 뜻이다
** 핵심: 일부분에서 발생가능한 모든 경우의 수(패턴)를 발견할 능력이 있나??
*/


