#1 async&promise
(1)
promise는 ES6이후 내장객체로 등록이 되었다

(2)
data.now(): 현재의 시간
performance.now(): 브라우저가 이 페이지를 연 직후부터 얼마나 지났는가??

(3)
async함수의 호출결과는 f2를 호출한 결과를 return하고 있다
f2는 단순히 def를 넘기는 역할을 하고 있다

async함수의 return값은 promise가 된다
async는 promise생성기라고 생각해도 된다

async함수의 호출결과를 return하는것은 promise가 된다
async함수를 호출결과가 promise가 된다는것을 기억해야한다

#2 async / await
await은 async 내부에서 사용된다

(1)
await 다음에는 promise가 와야한다
await 뒤에 promise 함수가 오면 promise.then을 기다렸다 진행해주는 역할을 한다
await 뒤에 promise가 아닌값이 오면 그냥 바로 진행한다

자바스크립트에서는 함수호출 구문이 있을 때, 인자부터 해석한다
인자는 왼쪽 -> 오른쪽으로 해석된다
왼쪽에 있는 인자를 해석하려면 await이 관여하고 있다
await이 해소되어야 첫 번째 인자가 해석이 되고, 그 이후 두 번째 인자가 해석된 이후
console.log함수의 호출이 완료된다

자바스크립트의 문법조각조각을 쪼개서 계속해서 이 문이 진행될지 아닐지를 결정하게끔  ES6의 내부구조가 되어있다
ES6로 코드를 짜면 언어파서가 덩어리 지게 명령문으로 바꾸는것이 아니라 명령문 하나하나를 마치 커맨드 패턴의 커매드 객체처럼
객체를 감싼다 이것을 레코드라고 부른다

즉, 자바스크립트 엔진은 새로운 표준의 따라서 우리가 짠 코드를 하나하나 레코드 객체로 감싼다
실제 실행은 연속되어있는 레코드로 진행할지 특정명령을 닮은 레코드에서 멈췄다가 원하는 시점에 다시 재개할지 결정할 수 있다

그래서
await은 뒤에오는 값을 기준으로 해서 이 명령어 세트 하나의 레코드를 suspend 시키는 기능이 있다
당연히 promise.then 시점에 resume이 되서 그 이후가 진행되도록 한다

(2)
await은 직렬구문만 지원한다 await시점에 suspend를 하고 .then시점에 resume을 한다
꼭 하나하나 await을 걸지 않아도 인자 사이에 동기구문들은 비동기인 promise가 진행될때까지 멈춰있을 수 있다


# Promise.all과 race
(1) 
병렬 Promise를 사용하려면 Promise.all과 race가 필요하다
최신 브라우저에서는 Promise.finially이 추가 되었다
all: 배열에 지정된 모든 promise가 다해소되었을때 then이 실행된다
race: 배열에 지정된 promise가 하나라도 먼저실행되면 그 녀석이 결과값으로 나온다


# timeout fetch
timeout이 지원되는 fetch함수를 만들어보자


(1)
cps를 사용하는 이유는 동기명령어로 작성하는게 비동기명령어로 작성하는 것보다 훨씬 편하기 때문이다
동기명령안에서는 지역변수를 사용할 수 있기 때문에 복잡한 스코프나 인자에 넘나듬으로써 로직을 표현할 필요가 없다

