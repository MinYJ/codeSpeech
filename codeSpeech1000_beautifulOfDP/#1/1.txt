(1)
코드설계를 배우는이유?
코드의 품질을 높이기 위해서 배운다
코드의 품질을 높이려면 어떤 코드가 품질이 높은 코드인지 구분할 수 있는 눈을 가지고 있어야한다

좋은코드가 무엇인지 이해하는것이 최우선과제이다

#1 캡슐화, 추상화, 상속, 다형성

(1) 캡슐화
데이터은닉 -> 접근제어
캡슐화 -> 제한된 메소드 노출, 속성을 캡슐화

효과
사용자의 학습 비용 감소
사용 시 오류 확률 감소


(2) 
자바스크립트는 프로토타입으로 되어있고 클래스도 없지만, 객체지향 프로그래밍이다.
이유는 대체가능성과 내적 일반성을 가지고 있기 때문이다.

대체가능성: 구상형을 추상형으로 대체가능
타입이 계층구조를 가질 수 있다
타입시스템이지만 계층구조를 가질 수 없으면 객체지향이 될 수 없다

내적동질성: 생성형이 언제나 연산을 실행함
내가 child로 선언하면 parents여도 child이다.


(3) 상속
상속의 문제점
- 상속이 연쇄된 의존성을 만들어냄
>> 상위계층을 수정시 아래계층에게 알 수 없는 영향을 줄 수 있음
>> 단점: 깊은상속이 나쁜 이유는 상위 클래스 수정시 여파가 너무커져서 비용이 너무 많이 든다
>> 장점: 각 상속단계에서 구현을 재활용할 수 있다

- 내적동질성의 런타임을 유지하기위해 비용이 많이 든다


템플릿 메소드를 권장하는 이유는 상속임에도 부모클래스에 대한 의존성이 줄어들기 때문이다.

(4) 인터페이스
- 1단계의 의존성만 만들어냄
- 모든 의존하는 타입에 구현을 만들어야 함
>> 깊이의 연쇄된 의존성을 제거하기 위해서, 깊이에 구현을 하지 않고 개별 구상 클래스에다가 옮겼기때문에
의존하지 않음
>> 의존성의 깊이를 얕게 하기위해서 옆으로 퍼트림
>> 혹은 깊이에 구현하는 대신 깊이에 대한 연쇄의존성에 대해 책임을 질것인가

(5) 트레이트
- 인터페이스와 흡사, 타입과 인터페이스의 연결을 별도로 정의함
- 타입에 인터페이스를 추가하기 쉬움

(6) 타입계층
- 호스트코드는 추상하된 연산에 의존하게 됨
- 추상화된 연산의 변경이 매우 힘듬
- 추상층에 의존하는 모든 구상층의 연산을 변경해야 함
- 데이터가 많고 연산이 정해진 경우 유효함
- 이를 타입계층이라 부름
- 여기서 타입은 연산의 집합임

(7) 추상데이터타입
- 제공되는 타입은 1개이나 내부에 다양한 데이터를 소유할 수 있음
- 각 연산 내부에서 데이터를 분기하여 처리함
- 데이터의 종류가 늘어날 때마다 모든 연산을 고쳐야함
- 반대로 연산을 늘리기는 쉬움
