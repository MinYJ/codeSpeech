#1
(1) Symbol은 새롭게 추가된 primitive타입이다.
- 모든 심볼은 유니크한 값이다(마치 A의 1과 B의 1이 서로다른 1인것과 같다)

(2) Symbol 오브젝트 키로 사용하는 방법
- '계산된 오브젝트' 라는 문법을 사용해야함(대괄호)
- [Symbol.iterator]는 문자열대체가 가능하다


(3) iterable을 쓰는 이유?
- 새롭게 쓰일 수 있는 iterator을 얻을 수 있다
- iterator만 있을경우 한 번 반복시킨후 수명이 다해서 사라지는데,
  원본은 그대로 둔 상태에서 계속해서 반복가능하게 사용하기 위해서이다

(4) 값과 문의 차이점
값: 메모리상의 저장되거나 다른 곳에 할당할 수 있다 
문: 컴파일러 혹은 자바스크립트엔진이 힌트를 받아서 실행후에, 흔적도 없이 사라진다
문으로 하는것은 다 휘발성이다

- 즉, 문으로 loop를 돌리면 
- 1번. 재현이 불가능하고 
- 2번. 원할때 다시 실행할 수 없다

(5)
ES6이전: 문을 통한 flow control의 집중
ES6이후: 객체의 상태를 통한 지연 루프, 값을 통한 루프,  캡슐화를 통한 루프
	언어에서 실행만 해줄게

#2
(1) 인터페이스
- 사양에 맞는 값과 연결된 속성키의 셋트

(2) 옵션 if만 사용
- 너는 원래 A야 근데 이 조건이면 B로 바꿀게
- 기본값은 A이다. 만약 다른상태면 B로 바꾸겠다.

(3) while(true) { if() break; }
- 무한 실행기

(4) 배열과 iterator가 있는 배열의 차이점?
>> loop에 대한 통제를 안에서 결정할 수 있다.

(5) 함수호출
>> 흐름을 지연시킬 수 있다.
>> 배열의단점은 내가 사용할지 안할지 모르는 메모리크기를 확장해야한다.

(6) generator
>> 특징1. 제어문을 멈춘다
>> 특징2. 