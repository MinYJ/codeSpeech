(1)
변수: 메모리주소의 또 다른 이름, 별명
데이터타입: 해당 메모리 주소로부터 얼마만큼의 길이의 공간을 이 변수가 차지하나, 데이터 길이를 나타낸다

(2)
객체지향에서는 타입은 중요한 의미를 가진다
모든것을 형으로 바꿔서 생각해볼 필요가 있다

(3)
객체지향에서 사용할 수 있는 어떤것은 Types(형) 밖에 없다
형을 제외하고는 객체지향을 구현할 수 없다

-> 강타입언어의 장점이자 타입을 진짜로 쓸 수 있냐 없냐의 문제이기도 하다
-> 객체지향은 타입으로 나타낼수 없으면 사용할 수 없다

(4)
point: 우리가 생각해야할 것은 "우리의 사고를 types(형)으로 전환할 수 있는가 없는가"에 달려있다
우리의 개념을 type으로 만들면 구현한것이고 type으로 만들지 못하면 구현하지 못한 것이다.

(5)
(5.1)
Role: 형을 통해 역할을 묘사함
역할은 반드시 타입으로 구현되어야 한다.

(5.2)
Responsibility: 형을 통해 로직을 표현함

(5.3)
Message: 형을 통해 메세지를 공유함
-> 스크립트언어 대부분은 컴파일타임이 없기에 실제로 메세지를 보낼 때,
메세지를 받아주는 쪽이 hashMap구조로 되어있다
hashMap안에 해당 키가 있으면 찾아지는 것이고 아니면
없는키에대한 함수를 호출했다고 프로그램을 죽인다.

(5.4)
Protocol: 객체 간 계약을 형을 통해 공유함