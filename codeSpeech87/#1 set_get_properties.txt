#1 property
(1)
프로퍼티란 무엇인가?
프로퍼티에 대해 이해하기 위해서는 객체지향에서 가장 중요하게 생각하는 상태은닉과 캡슐화에 대해서 이해해야 한다.


클래스에서 프로퍼티란 내부적인 의미에서 은닉되어있는 상태,  외부적인 의미에서는 캡슐화되어 있는 인터페이스
프로퍼티는 외부에 캡슐화 되어있는 행위
핵심키워드는 행위로써 반복될 수 있다

(2) 
방금 코드가 중복해서 나왔던 이유는 name과 company의 행위가 비슷했기 때문이다
이 행위를 메서드를 감싸는것 만으로는 충분한 추상화가 이루어지지 않는다

왜 충분한 추상화가 이루어지지 않았을까?
여전히 코드가 중복되고 있기 때문이다
_set, _get을 만드는 행위가 중복되고 있기 때문이다
실제적으로 코드가 줄지 않았다

어떻게 하면 중복된 코드를 더 줄일 수 있을까

지금까지는 공통된 로직을 메서드로 만들었다면, 이것을 아예 객체로 만드려고 한다

#2 Property to  Object

(1)
_set, _get은 순수하게 알고리즘만 있다
이것은 상태를 this에 있는 map에 의존하고 있다.
이 메서드는 this에 있는 #map을 다루는 알고리즘일 뿐이다

_set, _get이 상태를 가지고 있는것이 아니라
this context의 상태를 빌려서 사용하는 레시피만 들어있다

(2)
지금까지 test클래스 내부에 있던 behavior를 외부 클래스인 TestDelegate에 옮겨서
둘이 협력관계로 재설정할 수 있다

(3)
내부에서는 동적속성 외부에서는 정적속성을 나타낸다
동적인 속성을 감추고 외부에 정적인 속성을 나타내는 프로퍼티 패턴이다

이전 코드와 다르게 게터와 세터의 알고리즘을 외부에 있는 클래스에게 역할을 분리해주는데 성공했다
이 delegate의 속성은 자신의 상태를 갖고 있는게 아니라 외부상태를 주입받아서 그 상태를 다루는 알고리즘을 갖고 있다

(4)
내부의 은닉되어있는 상태를 외부에 캡슐화해서 제공하기 위한것이 외부 프로퍼티이다. 
현재는 여기에 더 나아가서  내부의 상태가 아니라 외부의 상태를 둔걸 중계해서 제공하고 있다

프로퍼티의 본질은 내부의 상태를 포장하는게 아니라 어디에 있든간에 포장해서 내가 제공하는 캡슐화만 제공하면 된다

(5)
나는 company라는 속성을 제공하고 있는데 이 company 속성의 값이 내 안에 있지도 않고 다른 객체인 ValueDelegate에 있다
내부상태를 중계해서 보여주는것을 넘어 상태가 어디에 있는지 신경쓰지 말고 나한테 그냥 company만 얻어가라
이것이 프로퍼티의 실체이다

외부의 공개되어 있는 캡슐화된 프로퍼티의 실체라는것은 어디서 수습해왔는지 안쪽 코드에 관심을 갖지 말아라

(6)
프로퍼티를 제공하면 좋은점은 프로퍼티의 인자 한 개 있는 함수와 세터, 게터 함수를 동시에 제공하는 인터페이스를 외부에서는 
하나만 이해하면 된다

- 세상에서 제일 좋은 함수는 인자가 없는 함수
- 두번째가 인자가 1개 있는 함수

(7)
1. 상태를 위임받아서 알고리즘만 제공해주는 TestDelegate과 2. 아예 상태까지 위임받아서 자기 안에서 돌리는 valueDelegate 두 가지를 알아보았다
하지만 현재 문제점은 아직도 코드는 줄어들지 않았다


#2 DefineProperty
(1)
example5의 단점은 new를 할때마다 프로퍼티 정의를 한다.
사실은 모든 인스턴스가 똑같은 name과 company갖는것을 class차원에서 보장해야하는데
생성시점인 인스턴스 수준에서 보장하고 있는 단점이 있다.


#3 DefineProperty to Prototype
prototype은 모든 인스턴스에 작동하는것이고 특정인스턴스에 작동하는것은 아니다

(1)
prop함수를 보면 target, key, delegator를 받는것은 똑같지만
이 target이 더 이상 인스턴스가 아니라 프로토타입이 들어온다

프로토타입에 이것을 정의하면 게터,세터가 프로토 타입 수준의 정의가 된다
프로토타입 수준에 정의가 되면 제가 인스턴스의 name, company를 사용하려고 할 때,
프로토타입 체인을 타고 올라간다. 그 체인을 타고 올라갈때 이 게터, 세터가 불려지는 순간
this context가 인스턴스에게 전달된다 그래서 delegator에게 this를 넘겨주면 그 때 전달되어 지는
인스턴스의 컨텍스트가 testDelegate에 있는 getValue, setValue target으로 들어오게 되고
해당 인스턴스의 메모리에 있는 map을 사용하게 된다

지금은 #(private)으로 정의할 수 없게 됬다
왜냐하면 런타임에 TestDelegate가 접근해서 가져가야 하기 때문이다

#4 Delegate Class Wrapper
클래스의 정의를 test로 했다
클래스 외부에서 클래스 속성을 정의했다 이 문법을 통해 과연 효과적으로 test class의 스펙을 파악하기가 좋을것인가?

동적으로 속성을 추가하는것은 좋을 수 있으나 코드에서 파악이 되지 않는다

#5 Delegate Class Wrapper


